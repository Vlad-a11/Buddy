import os
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
from dotenv import load_dotenv
from datetime import datetime
import asyncio
from flask import Flask, request


load_dotenv()
API_URL = os.getenv("HUGGINGFACE_API_URL")
API_TOKEN = os.getenv("HUGGINGFACE_API_TOKEN")
headers = {"Authorization": f"Bearer {API_TOKEN}"}


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANGUAGE, CHOOSING, ANXIETY, INSECURITY, PANIC, AI_SUPPORT, JOURNAL_WRITE = range(7)

TEXTS = {
    "ru": {
        "choose_language": "üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "lang_ru_selected": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "lang_en_selected": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "lang_kk_selected": "–°—ñ–∑ “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!",
        "greeting": (
            "–ü—Ä–∏–≤–µ—Ç!\n"
            "–Ø Buddy ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ üåø\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –∫–æ–≥–¥–∞:\n"
            "‚Äî —Ç—Ä–µ–≤–æ–∂–Ω–æ\n"
            "‚Äî –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–µ—à–∞–µ—Ç\n"
            "‚Äî –ø–∞–Ω–∏–∫–∞ –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç\n"
            "‚Äî —Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "–° —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å–µ–π—á–∞—Å?"
        ),
        "menu_prompt": "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        "anxiety": "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
        "insecurity": "–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "panic": "–ü–∞–Ω–∏–∫–∞",
        "support": "–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        "ai_prompt": "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
        "exit_ai": "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        "journal_empty": "üì≠ –í –∂—É—Ä–Ω–∞–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
        "ready_button": "–ì–æ—Ç–æ–≤",
        "menu_button": "–í –º–µ–Ω—é",
        "back_menu": "–í –º–µ–Ω—é",
        "anxiety_text": "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç. –Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.",
        "insecurity_text": "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.",
        "panic_text": "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É.",
        "sos_button": "üÜò SOS",
        "praise_button": "üåü –ü–æ—Ö–≤–∞–ª–∏",
        "clear_journal": "–û—á–∏—Å—Ç–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫",
        "journal_button": "üìî –ñ—É—Ä–Ω–∞–ª",
        "reply_keyboard_hint": "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω–∏–∑—É üëá",
        "sos_message": (
            "–¢—ã –Ω–µ –æ–¥–∏–Ω. –î—ã—à–∏ –≥–ª—É–±–æ–∫–æ.\n"
            "–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ. –Ø —Ä—è–¥–æ–º."
        ),
        "write_journal_prompt": "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫:",
        "journal_saved": "–¢–≤–æ—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è(–∞—Å—å).",
        "praise_response": "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –Ø —Ç–æ–±–æ–π –≥–æ—Ä–∂—É—Å—å ‚ù§Ô∏è",
        "sos_response": "–Ø —Å —Ç–æ–±–æ–π. –°–¥–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –≤–º–µ—Å—Ç–µ?",
        "panic_ready_response": (
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º 4 –∫—Ä—É–≥–∞ –¥—ã—Ö–∞–Ω–∏—è ¬´–ö–æ—Ä–æ–±–∫–∞¬ª.\n"
            "–í–¥–æ—Ö ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
            "–ó–∞–¥–µ—Ä–∂–∫–∞ ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
            "–í—ã–¥–æ—Ö ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
            "–ó–∞–¥–µ—Ä–∂–∫–∞ ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n\n"
            "–ù–∞–ø–∏—à–∏, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å."
        ),
        "unknown_command": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
        "cancel_message": "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start.",
        "thank_you_anxiety": "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–ø–∏—Å–∞–ª(–∞) –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {}",
        "thank_you_insecurity": "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏: {}",
        "return_menu_prompt": "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        "journal_cleared": "–î–Ω–µ–≤–Ω–∏–∫ –æ—á–∏—â–µ–Ω."
    },
    "en": {
        "choose_language": "üåç Choose your language:",
        "lang_ru_selected": "You selected Russian. Welcome!",
        "lang_en_selected": "You selected English. Welcome!",
        "lang_kk_selected": "You selected Kazakh. Welcome!",
        "greeting": (
            "Hi!\n"
            "I'm Buddy ‚Äî your personal mental support bot üåø\n\n"
            "I can help you when:\n"
            "‚Äî you feel anxious\n"
            "‚Äî insecurity bothers you\n"
            "‚Äî panic hits\n"
            "‚Äî you want support\n\n"
            "What shall we work on now?"
        ),
        "menu_prompt": "Choose an option below:",
        "anxiety": "Anxiety",
        "insecurity": "Insecurity",
        "panic": "Panic",
        "support": "Need support",
        "ai_prompt": "Write what worries you. I'll try to help.",
        "exit_ai": "Exit support",
        "ready_button": "Ready",
        "menu_button": "Menu",
        "back_menu": "Menu",
        "anxiety_text": "Tell me what‚Äôs making you anxious. I‚Äôll help you work through it.",
        "insecurity_text": "Share your thoughts about what makes you feel insecure.",
        "panic_text": "If you are ready, press 'Ready' to start the breathing exercise.",
        "sos_button": "üÜò SOS",
        "praise_button": "üåü Praise",
        "clear_journal": "Clear journal",
        "journal_button": "üìî Journal",
        "reply_keyboard_hint": "Choose an action below üëá",
        "journal_empty": "üì≠ There are no entries in the journal yet.",
        "sos_message": (
            "You are not alone. Breathe deeply.\n"
            "Everything will be okay. I'm here."
        ),
        "write_journal_prompt": "Write what you want to save in the journal:",
        "journal_saved": "Your entry has been saved. Thanks for sharing.",
        "praise_response": "You‚Äôre doing great! I‚Äôm proud of you ‚ù§Ô∏è",
        "sos_response": "I‚Äôm with you. Let‚Äôs take a deep breath together?",
        "panic_ready_response": (
            "Great! Let's do 4 rounds of Box breathing.\n"
            "Inhale ‚Äî 4 seconds\n"
            "Hold ‚Äî 4 seconds\n"
            "Exhale ‚Äî 4 seconds\n"
            "Hold ‚Äî 4 seconds\n\n"
            "Write to me when you're done."
        ),
        "unknown_command": "Unknown command.",
        "cancel_message": "See you! If you need me, just write /start.",
        "thank_you_anxiety": "Thank you for sharing: {}",
        "thank_you_insecurity": "Thank you for sharing your thoughts: {}",
        "return_menu_prompt": "If you want to return to menu, press the button below.",
        "journal_cleared": "Journal cleared."
    },
    "kk": {
        "choose_language": "üåç –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "lang_ru_selected": "–°—ñ–∑ –æ—Ä—ã—Å —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!",
        "lang_en_selected": "–°—ñ–∑ –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!",
        "lang_kk_selected": "–°—ñ–∑ “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!",
        "greeting": (
            "–°”ô–ª–µ–º!\n"
            "–ú–µ–Ω Buddy ‚Äî —Å–µ–Ω—ñ“£ –∂–µ–∫–µ –ø—Å–∏—Ö–æ–ª–æ–≥—ã“£ üåø\n\n"
            "–ú–µ–Ω —Å–∞“ì–∞–Ω –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω, –µ–≥–µ—Ä:\n"
            "‚Äî —É–∞–π—ã–º–¥–∞–ø –∂“Ø—Ä—Å–µ“£\n"
            "‚Äî —Å–µ–Ω—ñ–º—Å—ñ–∑–¥—ñ–∫ –±–æ–ª—Å–∞\n"
            "‚Äî –ø–∞–Ω–∏–∫–∞ –±–æ–ª—Å–∞\n"
            "‚Äî “õ–æ–ª–¥–∞—É –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞\n\n"
            "“ö–∞–∑—ñ—Ä –Ω–µ–º–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–º—ñ–∑?"
        ),
        "menu_prompt": "–¢”©–º–µ–Ω–¥–µ–≥—ñ –æ–ø—Ü–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        "anxiety": "–£–∞–π—ã–º",
        "insecurity": "–°–µ–Ω—ñ–º—Å—ñ–∑–¥—ñ–∫",
        "panic": "–ü–∞–Ω–∏–∫–∞",
        "support": "“ö–æ–ª–¥–∞—É –∫–µ—Ä–µ–∫",
        "ai_prompt": "–ù–µ –∞–ª–∞“£–¥–∞—Ç–∞–¥—ã? –ú–µ–Ω –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω.",
        "exit_ai": "“ö–æ–ª–¥–∞—É–¥–∞–Ω —à—ã“ì—É",
        "ready_button": "–î–∞–π—ã–Ω–º—ã–Ω",
        "menu_button": "–ú”ô–∑—ñ—Ä",
        "back_menu": "–ú”ô–∑—ñ—Ä",
        "anxiety_text": "–°–µ–Ω—ñ –Ω–µ –Ω”ô—Ä—Å–µ —É–∞–π—ã–º–¥–∞—Ç—ã–ø —Ç“±—Ä? –ë—ñ—Ä–≥–µ —à–µ—à—ñ–º —Ç–∞–±–∞–π—ã“õ.",
        "insecurity_text": "”®–∑—ñ“£–¥—ñ —Å–µ–Ω—ñ–º—Å—ñ–∑ —Å–µ–∑—ñ–Ω–µ—Ç—ñ–Ω –∂–∞“ì–¥–∞–π–ª–∞—Ä—ã“£–º–µ–Ω –±”©–ª—ñ—Å.",
        "panic_text": "–î–∞–π—ã–Ω –±–æ–ª—Å–∞“£—ã–∑, ¬´–î–∞–π—ã–Ω–º—ã–Ω¬ª –¥–µ–ø –±–∞—Å—ã“£—ã–∑, –¥–µ–º –∞–ª—É —Ç–µ—Ö–Ω–∏–∫–∞—Å—ã–Ω –±–∞—Å—Ç–∞–π–º—ã–∑.",
        "sos_button": "üÜò",
        "praise_button": "üåü",
        "journal_button": "üìî",
        "clear_journal": "–î–Ω–µ–≤–Ω–∏–∫—Ç—ñ —Ç–∞–∑–∞—Ä—Ç—É",
        "reply_keyboard_hint": "–¢”©–º–µ–Ω–Ω–µ–Ω ”ô—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑ üëá",
        "journal_empty": "üì≠ –î–Ω–µ–≤–Ω–∏–∫—Ç–µ ”ô–∑—ñ—Ä–≥–µ –∂–∞–∑–±–∞–ª–∞—Ä –∂–æ“õ.",
        "sos_message": (
            "–°–µ–Ω –∂–∞–ª“ì—ã–∑ –µ–º–µ—Å—Å—ñ“£. –¢–µ—Ä–µ“£ —Ç—ã–Ω—ã—Å –∞–ª.\n"
            "–ë–∞—Ä–ª—ã“ì—ã –∂–∞“õ—Å—ã –±–æ–ª–∞–¥—ã. –ú–µ–Ω —Å–µ–Ω—ñ–º–µ–Ω –±—ñ—Ä–≥–µ–º—ñ–Ω."
        ),
        "write_journal_prompt": "–î–Ω–µ–≤–Ω–∏–∫–∫–µ –∂–∞–∑“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω –Ω”ô—Ä—Å–µ–Ω—ñ –∂–∞–∑—ã“£—ã–∑:",
        "journal_saved": "–ñ–∞–∑–±–∞“£—ã–∑ —Å–∞“õ—Ç–∞–ª–¥—ã. –ë”©–ª—ñ—Å–∫–µ–Ω—ñ“£—ñ–∑–≥–µ —Ä–∞“õ–º–µ—Ç.",
        "praise_response": "–ñ–∞—Ä–∞–π—Å—ã“£! –ú–µ–Ω —Å–∞“ì–∞–Ω –º–∞“õ—Ç–∞–Ω–∞–º—ã–Ω ‚ù§Ô∏è",
        "sos_response": "–ú–µ–Ω —Å–µ–Ω—ñ–º–µ–Ω–º—ñ–Ω. –¢–µ—Ä–µ“£ —Ç—ã–Ω—ã—Å –∞–ª–∞–π—ã“õ –ø–∞?",
        "panic_ready_response": (
            "–¢–∞–º–∞—à–∞! 4 —Ä–µ—Ç ¬´“ö–æ—Ä–∞–ø¬ª —Ç—ã–Ω—ã—Å –∞–ª—É –∂–∞—Ç—Ç—ã“ì—É—ã–Ω –∂–∞—Å–∞–π–º—ã–∑.\n"
            "–¢—ã–Ω—ã—Å –∞–ª—É ‚Äî 4 —Å–µ–∫—É–Ω–¥\n"
            "–¢—ã–Ω—ã—Å “±—Å—Ç–∞–ø —Ç“±—Ä—É ‚Äî 4 —Å–µ–∫—É–Ω–¥\n"
            "–®—ã“ì–∞—Ä—É ‚Äî 4 —Å–µ–∫—É–Ω–¥\n"
            "–¢—ã–Ω—ã—Å “±—Å—Ç–∞–ø —Ç“±—Ä—É ‚Äî 4 —Å–µ–∫—É–Ω–¥\n\n"
            "–ê—è“õ—Ç–∞“ì–∞–Ω—ã“£–¥—ã –∂–∞–∑—ã“£—ã–∑."
        ),
        "unknown_command": "–ë–µ–ª–≥—ñ—Å—ñ–∑ –∫–æ–º–∞–Ω–¥–∞.",
        "cancel_message": "–ö”©—Ä—ñ—Å–∫–µ–Ω—à–µ! “ö–∞–∂–µ—Ç –±–æ–ª—Å–∞ /start –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.",
        "thank_you_anxiety": "–ë”©–ª—ñ—Å–∫–µ–Ω—ñ“£—ñ–∑–≥–µ —Ä–∞—Ö–º–µ—Ç: {}",
        "thank_you_insecurity": "–û–π–ª–∞—Ä—ã“£—ã–∑–¥—ã –±”©–ª—ñ—Å–∫–µ–Ω—ñ“£—ñ–∑–≥–µ —Ä–∞—Ö–º–µ—Ç: {}",
        "return_menu_prompt": "–ú”ô–∑—ñ—Ä–≥–µ “õ–∞–π—Ç—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑.",
        "journal_cleared": "–î–Ω–µ–≤–Ω–∏–∫ —Ç–∞–∑–∞—Ä—Ç—ã–ª–¥—ã."
    }
}


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def lang_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
         InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"),
         InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang_kk")]
    ])

def main_menu_keyboard(lang):
    texts = TEXTS[lang]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(texts["anxiety"], callback_data="anxiety"),
         InlineKeyboardButton(texts["insecurity"], callback_data="insecurity")],
        [InlineKeyboardButton(texts["panic"], callback_data="panic")],
        [InlineKeyboardButton(texts["support"], callback_data="support")]
    ])

def bottom_menu_keyboard(lang):
    texts = TEXTS[lang]
    return ReplyKeyboardMarkup([
        [texts["journal_button"], texts["sos_button"], texts["praise_button"]]
    ], resize_keyboard=True)

def panic_keyboard(lang):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["ready_button"], callback_data="panic_ready")],
        [InlineKeyboardButton(TEXTS[lang]["back_menu"], callback_data="back_menu")]
    ])

def ai_support_keyboard(lang):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["exit_ai"], callback_data="exit_ai")],
        [InlineKeyboardButton(TEXTS[lang]["back_menu"], callback_data="back_menu")]
    ])

def back_menu_keyboard(lang):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["back_menu"], callback_data="back_menu")]
    ])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(TEXTS["ru"]["choose_language"], reply_markup=lang_keyboard())
    return LANGUAGE

async def language_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    context.user_data["lang"] = lang_code

    await query.edit_message_text(TEXTS[lang_code]["greeting"], reply_markup=main_menu_keyboard(lang_code))
    return CHOOSING

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "ru")
    data = query.data

    if data == "anxiety":
        await query.edit_message_text(TEXTS[lang]["anxiety_text"], reply_markup=back_menu_keyboard(lang))
        return ANXIETY

    elif data == "insecurity":
        await query.edit_message_text(TEXTS[lang]["insecurity_text"], reply_markup=back_menu_keyboard(lang))
        return INSECURITY

    elif data == "panic":
        await query.edit_message_text(TEXTS[lang]["panic_text"], reply_markup=panic_keyboard(lang))
        return PANIC

    elif data == "support":
        await query.edit_message_text(TEXTS[lang]["ai_prompt"], reply_markup=ai_support_keyboard(lang))
        return AI_SUPPORT

    elif data == "journal":
        await query.edit_message_text(TEXTS[lang]["write_journal_prompt"], reply_markup=back_menu_keyboard(lang))
        return JOURNAL_WRITE

    elif data == "sos":
        await query.edit_message_text(TEXTS[lang]["sos_message"], reply_markup=main_menu_keyboard(lang))
        return CHOOSING

    elif data == "praise":
        await query.edit_message_text(TEXTS[lang]["praise_response"], reply_markup=main_menu_keyboard(lang))
        return CHOOSING

    elif data == "back_menu":
        await query.edit_message_text(TEXTS[lang]["greeting"], reply_markup=main_menu_keyboard(lang))
        return CHOOSING

    elif data == "panic_ready":
        await query.edit_message_text(TEXTS[lang]["panic_ready_response"], reply_markup=back_menu_keyboard(lang))
        return PANIC

    elif data == "exit_ai":
        await query.edit_message_text(TEXTS[lang]["greeting"], reply_markup=main_menu_keyboard(lang))
        return CHOOSING

    elif data == "clear_journal":
        context.user_data["journal"] = []
        await query.edit_message_text(TEXTS[lang]["journal_cleared"], reply_markup=main_menu_keyboard(lang))
        return CHOOSING

    else:
        await query.edit_message_text(TEXTS[lang]["unknown_command"])
        return CHOOSING

def reply_keyboard(lang):
    texts = TEXTS[lang]
    return ReplyKeyboardMarkup(
        [
            [texts["sos_button"], texts["praise_button"]],
            [texts["journal_button"]]
        ],
        resize_keyboard=True
    )

async def anxiety_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    text = update.message.text
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    entry = f"{now} ‚Äî {TEXTS[lang]['anxiety']}: {text}"
    context.user_data.setdefault("journal", []).append(entry)
    await update.message.reply_text(TEXTS[lang]["thank_you_anxiety"].format(text), reply_markup=bottom_menu_keyboard(lang))
    return CHOOSING

async def insecurity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    text = update.message.text
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    entry = f"{now} ‚Äî {TEXTS[lang]['insecurity']}: {text}"
    context.user_data.setdefault("journal", []).append(entry)
    await update.message.reply_text(TEXTS[lang]["thank_you_insecurity"].format(text), reply_markup=bottom_menu_keyboard(lang))
    return CHOOSING

async def panic_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    text = update.message.text.strip().lower()
    if text in ["–≥–æ—Ç–æ–≤", "done", "finished", "–∑–∞–∫–æ–Ω—á–µ–Ω–æ"]:
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        context.user_data.setdefault("journal", []).append(f"{now} ‚Äî {TEXTS[lang]['panic']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await update.message.reply_text(TEXTS[lang]["return_menu_prompt"], reply_markup=bottom_menu_keyboard(lang))
        return CHOOSING
    else:
        await update.message.reply_text(TEXTS[lang]["panic_text"], reply_markup=panic_keyboard(lang))
        return PANIC

async def panic_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–†–ê–ë–û–¢–ê–ï–¢")
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "ru")
    data = query.data

    if data == "panic_repeat":
        context.user_data["panic_cycles"] = 0
        return await handle_panic_breathing(update, context)

    elif data == "panic_ready":
        chat_id = query.message.chat.id
        await query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É...")
        asyncio.create_task(panic_breathing_task(context.bot, chat_id, context))
        return PANIC

    elif data == "save_panic":
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        journal = context.user_data.get("journal", [])
        journal.append(f"{now} ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞ –ø—Ä–∏ –ø–∞–Ω–∏–∫–µ (–¥—ã—Ö–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–º)")
        context.user_data["journal"] = journal

        await query.edit_message_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∂—É—Ä–Ω–∞–ª.")
        await query.message.reply_text(
            TEXTS[lang]["return_menu_prompt"],
            reply_markup=main_menu_keyboard(lang)
        )
        return CHOOSING

    elif data == "back_menu":
        await query.edit_message_text(TEXTS[lang]["greeting"], reply_markup=main_menu_keyboard(lang))
        return CHOOSING

    else:
        await query.edit_message_text(TEXTS[lang]["unknown_command"])
        return CHOOSING

def query_hf(payload):
    response = requests.post(API_URL, headers=headers, json=payload)
    response.raise_for_status()  # –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    return response.json()

async def ai_support_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    user_text = update.message.text

    prompt = (
        "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
        "–û—Ç–≤–µ—Ç—å —Å —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —Ç—ë–ø–ª—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"{user_text}"
    )

    payload = {
        "inputs": prompt,
        "parameters": {"temperature": 0.8, "max_new_tokens": 150},
    }

    loop = asyncio.get_event_loop()
    try:
        response = await loop.run_in_executor(None, query_hf, payload)
        # response –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Å–ø–∏—Å–æ–∫ —Å 'generated_text', –ª–∏–±–æ dict —Å –æ—à–∏–±–∫–æ–π
        if isinstance(response, list) and "generated_text" in response[0]:
            ai_reply = response[0]["generated_text"]
        else:
            ai_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
        print(f"HuggingFace API error: {e}")
        ai_reply = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await update.message.reply_text(ai_reply, reply_markup=ai_support_keyboard(lang))
    return AI_SUPPORT

async def handle_panic_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    await update.message.reply_text(
        "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è ¬´–∫–≤–∞–¥—Ä–∞—Ç¬ª: –≤–¥–æ—Ö ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî –≤—ã–¥–æ—Ö ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞.\n"
        "–°–µ–π—á–∞—Å –Ω–∞—á–Ω—ë–º —Ü–∏–∫–ª –¥—ã—Ö–∞–Ω–∏—è...",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data["panic_cycles"] = 0
    return await handle_panic_breathing(update, context)

async def panic_ready_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥—ã—Ö–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥—ë–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
    asyncio.create_task(panic_breathing_task(context.bot, chat_id, context))

    # –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É...")

    return PANIC



async def panic_breathing_task(bot, chat_id, context):
    breathing_steps = [
        ("üå¨ –í–¥–æ—Ö–Ω–∏", 4),
        ("‚è∏ –ó–∞–¥–µ—Ä–∂–∏ –¥—ã—Ö–∞–Ω–∏–µ", 4),
        ("üí® –í—ã–¥–æ—Ö–Ω–∏", 4),
        ("‚è∏ –ó–∞–¥–µ—Ä–∂–∏ –¥—ã—Ö–∞–Ω–∏–µ", 4),
    ]

    for step, seconds in breathing_steps:
        msg = await bot.send_message(chat_id=chat_id, text=step)
        await asyncio.sleep(seconds)
        await bot.delete_message(chat_id=chat_id, message_id=msg.message_id)

    # –ü–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    lang = context.user_data.get("lang", "ru")
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤", callback_data="panic_ready"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="back_menu")
        ],
        [
            InlineKeyboardButton("üìì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∂—É—Ä–Ω–∞–ª", callback_data="save_panic")
        ]
    ])

    await bot.send_message(chat_id=chat_id, text="–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ö–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=keyboard)


async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    texts = TEXTS[lang]
    text = update.message.text.strip()

    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    context.user_data["finish"] = True
    context.user_data["state"] = None

    if text == texts["sos_button"]:
        await update.message.reply_text(
            texts["sos_message"] + "\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 150 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            reply_markup=bottom_menu_keyboard(lang)
        )
        return CHOOSING

    elif text == texts["praise_button"]:
        await update.message.reply_text(
            texts["praise_response"],
            reply_markup=bottom_menu_keyboard(lang)
        )
        return CHOOSING

    elif text == texts["journal_button"]:
        journal = context.user_data.get("journal", [])
        if not journal:
            text_journal = texts["journal_empty"]
        else:
            text_journal = "\n\n".join(journal)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(texts["clear_journal"], callback_data="clear_journal")],
            [InlineKeyboardButton(texts["back_menu"], callback_data="back_menu")]
        ])
        await update.message.reply_text(text_journal, reply_markup=keyboard)
        return CHOOSING

    else:
        await update.message.reply_text(texts["unknown_command"], reply_markup=bottom_menu_keyboard(lang))
        return CHOOSING



async def journal_save_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    entry = update.message.text
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    context.user_data.setdefault("journal", []).append(f"{now} ‚Äî {entry}")
    await update.message.reply_text(TEXTS[lang]["journal_saved"], reply_markup=bottom_menu_keyboard(lang))
    return CHOOSING

async def sos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    text = TEXTS[lang]["sos_message"] + "\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 150 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
    await update.message.reply_text(text, reply_markup=bottom_menu_keyboard(lang))
    return CHOOSING

async def debug_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print("DEBUG callback data:", query.data)
    await query.answer()
    return  # –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ

async def praise_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    await update.message.reply_text(TEXTS[lang]["praise_response"], reply_markup=bottom_menu_keyboard(lang))
    return CHOOSING

async def show_journal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    journal = context.user_data.get("journal", [])
    if not journal:
        text = TEXTS[lang]["journal_empty"]
    else:
        text = "\n\n".join(journal)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["clear_journal"], callback_data="clear_journal")],
        [InlineKeyboardButton(TEXTS[lang]["back_menu"], callback_data="back_menu")]
    ])
    await update.message.reply_text(text, reply_markup=keyboard)
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    await update.message.reply_text(TEXTS[lang]["cancel_message"])
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [
                CallbackQueryHandler(language_chosen, pattern="^lang_")
            ],
            CHOOSING: [
                CallbackQueryHandler(main_menu_handler, pattern="^(anxiety|insecurity|panic|support|journal|sos|praise|back_menu|ready|exit_ai|clear_journal)$"),
                MessageHandler(filters.TEXT & (~filters.COMMAND), reply_keyboard_handler),  # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            ],
            ANXIETY: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), anxiety_handler),
                CallbackQueryHandler(main_menu_handler, pattern="^back_menu$")
            ],
            INSECURITY: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), insecurity_handler),
                CallbackQueryHandler(main_menu_handler, pattern="^back_menu$")
            ],
            PANIC: [
                CallbackQueryHandler(panic_ready_handler, pattern="^panic_ready$"),
                CallbackQueryHandler(panic_callback_handler, pattern="^(panic_|save_panic)$"),  # —Ç—É—Ç —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å save_panic
                CallbackQueryHandler(main_menu_handler, pattern="^back_menu$"),
                CallbackQueryHandler(debug_callback_handler, pattern=".*"),  # –ø–æ—Å–ª–µ–¥–Ω–∏–π, –æ–±—â–∏–π
                MessageHandler(filters.TEXT & (~filters.COMMAND), panic_handler),
                CallbackQueryHandler(lambda update, context: update.callback_query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=True), pattern=".*"),
            ],            
            AI_SUPPORT: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), ai_support_handler),
                CallbackQueryHandler(main_menu_handler, pattern="^back_menu$")
            ],
            JOURNAL_WRITE: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), journal_save_handler),
                CallbackQueryHandler(main_menu_handler, pattern="^back_menu$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    print("Bot is polling...")
    app.run_polling()

if __name__ == "__main__":
    main()